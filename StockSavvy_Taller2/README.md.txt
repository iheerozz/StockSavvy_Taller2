üì¶ StockSavvy ‚Äì Taller 2 (POO + SQLite)

Integrantes:
- Santoiago Acosta
- Santigo Arago
- Guillaume Garey

Archivos principales:
- Taller_2_Santoiago_Acosta_Santigo_Arago_Guillaume_Garey.ipynb
- inventario.db
- Dise√±o_Arquitectura_Grupo_X.pdf

---

üß† 1. Problema que resolvemos
Peque√±os importadores y negocios locales necesitan calcular el costo real de sus productos (costo de f√°brica + env√≠o + seguro + arancel) y definir un precio de venta justo con margen de ganancia. 
Adem√°s, requieren una forma f√°cil de gestionar inventarios y registrar ventas.

StockSavvy automatiza estos c√°lculos usando Python, Programaci√≥n Orientada a Objetos (POO) y una base de datos SQLite.

---

üß± 2. Dise√±o y Arquitectura
El sistema aplica herencia y polimorfismo.

Clases principales:
- Producto: Clase base con atributos comunes (nombre, costo_unitario, margen, cantidad)
- ProductoNacional: Hereda de Producto, a√±ade el atributo fabricante
- ProductoImportado: Hereda de Producto, a√±ade pais_origen, costo_envio, tasa_arancel
- EstrategiaPrecio: Clase con un m√©todo est√°tico que usa polimorfismo para calcular precios seg√∫n el tipo de producto

Base de datos:
Tabla productos con columnas: Nombre, Tipo, Costo Unitario, Cantidad, Margen, Fabricante, Pa√≠s Origen, Costo Env√≠o, Tasa Arancel.
Si se inserta un producto con el mismo nombre, el sistema suma la cantidad existente en lugar de duplicar el registro.

---

‚öôÔ∏è 3. Requisitos del sistema
- Python 3.10 o superior
- Librer√≠a est√°ndar sqlite3
- Jupyter Notebook o VS Code para ejecutar el proyecto

---

‚ñ∂Ô∏è 4. C√≥mo ejecutar el programa
Opci√≥n A ‚Äî Desde Jupyter Notebook
1. Abre el archivo Taller_2_Santoiago_Acosta_Santigo_Arago_Guillaume_Garey.ipynb
2. Aseg√∫rate de que el archivo inventario.db est√° en el mismo directorio
3. Ejecuta todas las celdas (Kernel ‚Üí Restart & Run All)
4. Aparecer√° el men√∫ del sistema

Opci√≥n B ‚Äî Script (opcional)
Si incluyen una versi√≥n .py con el men√∫:
python src/app_inventario.py

C√°lculos principales:
CIF = (costo_unitario * cantidad) + costo_envio + seguro
seguro = (mercanc√≠a + env√≠o) * tasa_seguro%
arancel = CIF * tasa_arancel%
costo_total = CIF + arancel
precio_venta_total = costo_total * (1 + margen%)
precio_unitario = costo_unitario * (1 + margen%)
valor_inventario = precio_unitario * cantidad

---

‚öôÔ∏è 5. ¬øC√≥mo funciona el c√≥digo?
El sistema StockSavvy combina la programaci√≥n orientada a objetos (POO) con una base de datos SQLite, para crear una aplicaci√≥n simple pero muy √∫til de gesti√≥n de inventario para productos nacionales e importados.

Estructura del c√≥digo:
- Producto: Clase base. Contiene los datos comunes como el nombre, costo unitario, margen de ganancia y cantidad.
- ProductoNacional: Hereda de Producto y agrega el atributo fabricante. Representa productos hechos en el pa√≠s.
- ProductoImportado: Tambi√©n hereda de Producto, pero incluye el pa√≠s de origen, el costo de env√≠o y el arancel.
- EstrategiaPrecio: Usa polimorfismo para calcular el precio dependiendo del tipo de producto.

C√°lculos principales:
CIF = (costo_unitario * cantidad) + costo_envio + seguro
seguro = (mercanc√≠a + env√≠o) * tasa_seguro%
arancel = CIF * tasa_arancel%
costo_total = CIF + arancel
precio_venta_total = costo_total * (1 + margen%)

Base de datos SQLite:
El archivo inventario.db guarda todos los productos en la tabla productos.
Cada vez que el usuario agrega un producto, registra una venta o consulta el inventario, el sistema interact√∫a directamente con la base de datos.
Si se agrega el mismo producto dos veces, no se duplica: el programa actualiza la cantidad existente.
Los datos persisten incluso despu√©s de cerrar el programa.

Interfaz por consola (men√∫ interactivo):
1. Agregar producto nacional
2. Agregar producto importado
3. Mostrar inventario
4. Ver valor total del inventario
5. Registrar venta
6. Salir

Resultados y reportes:
Despu√©s de cada acci√≥n, el sistema muestra nombre y tipo de cada producto, precio unitario, cantidad disponible y valor total del inventario.

üéâ En resumen:
StockSavvy automatiza c√°lculos de importaci√≥n y m√°rgenes, guarda todo en SQLite, permite agregar, vender y consultar productos f√°cilmente, y aplica POO de forma clara y extensible.

ü§ù Cr√©ditos y aprendizajes del equipo:
Este proyecto fue una oportunidad para aplicar de forma pr√°ctica los conceptos de POO, persistencia de datos, y estructura modular de software.
Durante el desarrollo, aprendimos a:
- Dise√±ar e implementar clases con herencia y polimorfismo.
- Usar bases de datos SQLite integradas en Python.
- Organizar un proyecto profesional con control de versiones y documentaci√≥n.

StockSavvy nos permiti√≥ conectar la teor√≠a de programaci√≥n con un caso real de negocio, entendiendo c√≥mo la automatizaci√≥n puede mejorar la gesti√≥n de inventarios.



